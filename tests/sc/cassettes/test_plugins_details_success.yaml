interactions:
- request:
    body: null
    headers:
      Accept: ['*/*']
      Accept-Encoding: ['gzip, deflate']
      Connection: [keep-alive]
      Cookie: [TNS_SESSIONID=SESSIONID]
      User-Agent: [pyTenable/1.0.0 (pyTenable/1.0.0; Python/2.7.15)]
      X-SecurityCenter: ['0000000000']
    method: GET
    uri: https://securitycenter.home.cugnet.net/rest/plugin/19506
  response:
    body: {string: !!python/unicode '{"type":"regular","response":{"id":"19506","name":"Nessus
        Scan Information","description":"This plugin displays, for each tested host,
        information about the\nscan itself :\n\n  - The version of the plugin set.\n  -
        The type of scanner (Nessus or Nessus Home).\n  - The version of the Nessus
        Engine.\n  - The port scanner(s) used.\n  - The port range scanned.\n  - Whether
        credentialed or third-party patch management\n    checks are possible.\n  -
        The date of the scan.\n  - The duration of the scan.\n  - The number of hosts
        scanned in parallel.\n  - The number of checks done in parallel.","type":"active","copyright":"This
        script is Copyright (C) 2005-2019 and is owned by Tenable, Inc. or an Affiliate
        thereof.","version":"1.91","sourceFile":"scan_info.nasl","dependencies":"","requiredPorts":"","requiredUDPPorts":"","cpe":"","srcPort":null,"dstPort":null,"protocol":"","riskFactor":"None","solution":"n\/a","seeAlso":"","synopsis":"This
        plugin displays information about the Nessus scan.","checkType":"summary","exploitEase":"","exploitAvailable":"false","exploitFrameworks":"","cvssVector":"","cvssVectorBF":"0","baseScore":null,"temporalScore":null,"cvssV3Vector":"","cvssV3VectorBF":"0","cvssV3BaseScore":null,"cvssV3TemporalScore":null,"stigSeverity":null,"pluginPubDate":"1125072000","pluginModDate":"1549558800","patchPubDate":"-1","patchModDate":"-1","vulnPubDate":"-1","modifiedTime":"1549617353","md5":"9d6741749eae57f4ad7a8e262bf66a89","source":"IwojIChDKSBUZW5hYmxlIE5ldHdvcmsgU2VjdXJpdHksIEluYy4KIwoKaW5jbHVkZSgiY29tcGF0LmluYyIpOwoKaWYgKGRlc2NyaXB0aW9uKQp7CiAgc2NyaXB0X2lkKDE5NTA2KTsKICBzY3JpcHRfdmVyc2lvbigiMS45MSIpOwogIHNjcmlwdF9jdnNfZGF0ZSgiRGF0ZTogMjAxOS8wMi8wNyAgODozMjozNyIpOwoKICBzY3JpcHRfbmFtZShlbmdsaXNoOiJOZXNzdXMgU2NhbiBJbmZvcm1hdGlvbiIpOwogIHNjcmlwdF9zdW1tYXJ5KGVuZ2xpc2g6IkRpc3BsYXlzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzY2FuLiIpOwoKICBzY3JpcHRfc2V0X2F0dHJpYnV0ZShhdHRyaWJ1dGU6InN5bm9wc2lzIiwgdmFsdWU6CiJUaGlzIHBsdWdpbiBkaXNwbGF5cyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgTmVzc3VzIHNjYW4uIik7CiAgc2NyaXB0X3NldF9hdHRyaWJ1dGUoYXR0cmlidXRlOiJkZXNjcmlwdGlvbiIsIHZhbHVlOgoiVGhpcyBwbHVnaW4gZGlzcGxheXMsIGZvciBlYWNoIHRlc3RlZCBob3N0LCBpbmZvcm1hdGlvbiBhYm91dCB0aGUKc2NhbiBpdHNlbGYgOgoKICAtIFRoZSB2ZXJzaW9uIG9mIHRoZSBwbHVnaW4gc2V0LgogIC0gVGhlIHR5cGUgb2Ygc2Nhbm5lciAoTmVzc3VzIG9yIE5lc3N1cyBIb21lKS4KICAtIFRoZSB2ZXJzaW9uIG9mIHRoZSBOZXNzdXMgRW5naW5lLgogIC0gVGhlIHBvcnQgc2Nhbm5lcihzKSB1c2VkLgogIC0gVGhlIHBvcnQgcmFuZ2Ugc2Nhbm5lZC4KICAtIFdoZXRoZXIgY3JlZGVudGlhbGVkIG9yIHRoaXJkLXBhcnR5IHBhdGNoIG1hbmFnZW1lbnQKICAgIGNoZWNrcyBhcmUgcG9zc2libGUuCiAgLSBUaGUgZGF0ZSBvZiB0aGUgc2Nhbi4KICAtIFRoZSBkdXJhdGlvbiBvZiB0aGUgc2Nhbi4KICAtIFRoZSBudW1iZXIgb2YgaG9zdHMgc2Nhbm5lZCBpbiBwYXJhbGxlbC4KICAtIFRoZSBudW1iZXIgb2YgY2hlY2tzIGRvbmUgaW4gcGFyYWxsZWwuIik7CiAgc2NyaXB0X3NldF9hdHRyaWJ1dGUoYXR0cmlidXRlOiJzb2x1dGlvbiIsIHZhbHVlOiJuL2EiKTsKICBzY3JpcHRfc2V0X2F0dHJpYnV0ZShhdHRyaWJ1dGU6InJpc2tfZmFjdG9yIiwgdmFsdWU6Ik5vbmUiKTsKCiAgc2NyaXB0X3NldF9hdHRyaWJ1dGUoYXR0cmlidXRlOiJwbHVnaW5fcHVibGljYXRpb25fZGF0ZSIsIHZhbHVlOiIyMDA1LzA4LzI2Iik7CgogIHNjcmlwdF9zZXRfYXR0cmlidXRlKGF0dHJpYnV0ZToicGx1Z2luX3R5cGUiLCB2YWx1ZToic3VtbWFyeSIpOwogIHNjcmlwdF9zZXRfYXR0cmlidXRlKGF0dHJpYnV0ZToiYWdlbnQiLCB2YWx1ZToiYWxsIik7CiAgc2NyaXB0X3NldF9hdHRyaWJ1dGUoYXR0cmlidXRlOiJhbHdheXNfcnVuIiwgdmFsdWU6VFJVRSk7CiAgc2NyaXB0X2VuZF9hdHRyaWJ1dGVzKCk7CgogIGlmICggIWlzbnVsbChBQ1RfRU5EMikgKSBzY3JpcHRfY2F0ZWdvcnkoQUNUX0VORDIpOwogIGVsc2Ugc2NyaXB0X2NhdGVnb3J5KEFDVF9FTkQpOwogIHNjcmlwdF9mYW1pbHkoZW5nbGlzaDoiU2V0dGluZ3MiKTsKCiAgc2NyaXB0X2NvcHlyaWdodChlbmdsaXNoOiJUaGlzIHNjcmlwdCBpcyBDb3B5cmlnaHQgKEMpIDIwMDUtMjAxOSBhbmQgaXMgb3duZWQgYnkgVGVuYWJsZSwgSW5jLiBvciBhbiBBZmZpbGlhdGUgdGhlcmVvZi4iKTsKCiAgZXhpdCgwKTsKfQoKaW5jbHVkZSgncGx1Z2luX2ZlZWRfaW5mby5pbmMnKTsKaW5jbHVkZSgnc21iX2hvdGZpeGVzLmluYycpOwppbmNsdWRlKCdzbWJfZ2x1ZS5pbmMnKTsKaW5jbHVkZSgnYWdlbnQuaW5jJyk7CgpvbGRfZmVlZF9hbGVydCA9IDA7Ck5FU1NVUzYgPSBtYWtlX2xpc3QoNiwxMCw1KTsKbmVzX3ZlciA9IE5FU1NVU19WRVJTSU9OOwpuZXNfbGV2ZWwgPSBOQVNMX0xFVkVMOwpteVZlcnNpb24gPSBOVUxMOwoKaWYgKCFpc251bGwobmVzX3ZlcikpCnsKICBhcnJheSA9IHNwbGl0KG5lc192ZXIsIHNlcDonLicsIGtlZXA6RkFMU0UpOwogIG15VmVyc2lvbiA9IG1ha2VfbGlzdChpbnQoYXJyYXlbMF0pLCBpbnQoYXJyYXlbMV0pLCBpbnQoYXJyYXlbMl0pKTsKCiAgaWYgKCBteVZlcnNpb25bMF0gPCBORVNTVVM2WzBdIHx8IChteVZlcnNpb25bMF0gPT0gTkVTU1VTNlswXSAmJiAobXlWZXJzaW9uWzFdIDwgTkVTU1VTNlsxXSB8fCAobXlWZXJzaW9uWzFdID09IE5FU1NVUzZbMV0gJiYgbXlWZXJzaW9uWzJdIDwgTkVTU1VTNlsyXSkpKQogICkgbmV3X3ZlcnMgPSBzdHJpbmcoTkVTU1VTNlswXSwgIi4iLCBORVNTVVM2WzFdLCAiLiIsIE5FU1NVUzZbMl0pOwp9CgojCiMgSWYgbm8gcGx1Z2luIGhhcyBzaG93biBhbnl0aGluZywgcXVpZXRseSBleGl0CiMKbGlzdCA9IGdldF9rYl9saXN0KCJTdWNjZXNzLyoiKTsKaWYgKCBpc251bGwobGlzdCkgKSBleGl0KDApOwoKCmlmICggISBzdHJsZW4obmVzX3ZlcikgKQp7CiAgaWYgKCAhIGRlZmluZWRfZnVuYygicHJlYWQiKSAmJiBuZXNfbGV2ZWwgPj0gMjIwMiApCiAgICB2ZXJzaW9uID0gIk5lV1QiOwogIGVsc2UKICAgIHZlcnNpb24gPSAiVW5rbm93biAoTkFTTF9MRVZFTD0iICsgbmVzX2xldmVsICsgIikiOwp9CmVsc2UKICB2ZXJzaW9uID0gbmVzX3ZlcjsKCnVuc3VwcG9ydGVkX3ZlcnNpb24gPSBOVUxMOwppZiAoIWlzbnVsbChteVZlcnNpb24pICYmIG15VmVyc2lvblswXSA8IE5FU1NVUzZbMF0pCnsKICB1bnN1cHBvcnRlZF92ZXJzaW9uID0gJ1lvdXIgTmVzc3VzIHZlcnNpb24gJyArIHZlcnNpb24gKyAnIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuXG4nICsKICAgJ1BsZWFzZSBjb25zaWRlciB1cGdyYWRpbmcgdG8gZW5zdXJlIHRoYXQgcmVzdWx0cyBhcmUgY29tcGxldGUuXG4nOwp9CgppZiAoIG5ld192ZXJzICkKIHZlcnNpb24gKz0gIiAoTmVzc3VzICIgKyBuZXdfdmVycyArICcgaXMgYXZhaWxhYmxlLilcbic7CgphY2FzX2luZm8gPSAnJzsKcmVwb3J0ID0gJ0luZm9ybWF0aW9uIGFib3V0IHRoaXMgc2NhbiA6IFxuXG4nOwpyZXBvcnQgKz0gJ05lc3N1cyB2ZXJzaW9uIDogJyArIHZlcnNpb24gKyAnXG4nOwppZiAoIWlzbnVsbCh1bnN1cHBvcnRlZF92ZXJzaW9uKSkKICByZXBvcnQgKz0gdW5zdXBwb3J0ZWRfdmVyc2lvbiArICdcbic7CgppZiAoIFBMVUdJTl9TRVQgKQp7CiBpZiAoICAiSG9tZSIgPjwgUExVR0lOX0ZFRUQgKQogICBteVBsdWdpbkZlZWQgPSAiTmVzc3VzIEhvbWUiOwogZWxzZQogICBteVBsdWdpbkZlZWQgPSAiTmVzc3VzIjsKCiByZXBvcnQgKz0gJ1BsdWdpbiBmZWVkIHZlcnNpb24gOiAnICsgUExVR0lOX1NFVCAgICAgKyAnXG4nOwogcmVwb3J0ICs9ICdTY2FubmVyIGVkaXRpb24gdXNlZCA6ICcgKyBteVBsdWdpbkZlZWQgKyAnXG4nOwogc2V0X2tiX2l0ZW0obmFtZTogIlBsdWdpbkZlZWQvVmVyc2lvbiIsIHZhbHVlOiBQTFVHSU5fU0VUKTsKIHNldF9rYl9pdGVtKG5hbWU6ICJQbHVnaW5GZWVkL1R5cGUiLCB2YWx1ZTogUExVR0lOX0ZFRUQpOwogaWYgKCBQTFVHSU5fU0VUID1+ICJeWzAtOV0qJCIgKQogewogIHJlbFsieWVhciJdID0gaW50KHN1YnN0cihQTFVHSU5fU0VULCAwLCAzKSk7CiAgcmVsWyJtb24iXSA9IGludChzdWJzdHIoUExVR0lOX1NFVCwgNCwgNSkpOwogIHJlbFsibWRheSJdID0gaW50KHN1YnN0cihQTFVHSU5fU0VULCA2LCA3KSk7CiAgdGltZSA9ICgocmVsWyJ5ZWFyIl0gLSAxOTcwKSooMjQqMzYwMCozNjUpKSArCgkgIChyZWxbInllYXIiXSAtIDE5NzApLzQqMjQqMzYwMDsKICB0aW1lICs9IChyZWxbIm1vbiJdLTEpKigxMiozNjAwKjMwKzEyKjM2MDAqMzEpOwogIHRpbWUgKz0gcmVsWyJtZGF5Il0qKDI0KjM2MDApOwogIGRpZmYgPSAodW5peHRpbWUoKSAtIHRpbWUpLzM2MDAvMjQ7CiAgaWYgKCBkaWZmID49IDMwICYmIGRpZmYgPCAxMDAwMCApCiAgewogICBvbGRfZmVlZF9hbGVydCArKzsKICAgb2xkX2ZlZWQgPSBzdHJpbmcoIlxuRVJST1I6IFlvdXIgcGx1Z2lucyBoYXZlIG5vdCBiZWVuIHVwZGF0ZWQgc2luY2UgIiAsIHJlbFsieWVhciJdICwgIi8iICwgcmVsWyJtb24iXSAsICIvIiAsIHJlbFsibWRheSJdLCAiXG4iLAoiUGVyZm9ybWluZyBhIHNjYW4gd2l0aCBhbiBvbGRlciBwbHVnaW4gc2V0IHdpbGwgeWllbGQgb3V0LW9mLWRhdGUgcmVzdWx0cyBhbmQKcHJvZHVjZSBhbiBpbmNvbXBsZXRlIGF1ZGl0LiBQbGVhc2UgcnVuIG5lc3N1cy11cGRhdGUtcGx1Z2lucyB0byBnZXQgdGhlCm5ld2VzdCB2dWxuZXJhYmlsaXR5IGNoZWNrcyBmcm9tIE5lc3N1cy5vcmcuXG5cbiIpOwogICByZXBvcnQgKz0gb2xkX2ZlZWQ7CiAgfQogfQp9CgpuX3Byb2QgPSBnZXRfa2JfaXRlbSgibmVzc3VzL3Byb2R1Y3QiKTsKaWYgKCFpc251bGwobl9wcm9kKSkKewogIGlmIChuX3Byb2QgPT0gUFJPRFVDVF9XSU5fQUdFTlQgICkgICAgICBzY2FuX3R5cGUgPSAiV2luZG93cyBBZ2VudCI7CiAgZWxzZSBpZiAobl9wcm9kID09IFBST0RVQ1RfVU5JWF9BR0VOVCApIHNjYW5fdHlwZSA9ICJVbml4IEFnZW50IjsKICBlbHNlIGlmIChuX3Byb2QgPT0gUFJPRFVDVF9NQUNfQUdFTlQgKSAgc2Nhbl90eXBlID0gIk1hYyBBZ2VudCI7CiAgZWxzZSBpZiAobl9wcm9kID09IFBST0RVQ1RfTkVTU1VTRCAgICApIHNjYW5fdHlwZSA9ICJOb3JtYWwiOwogIGVsc2UgaWYgKG5fcHJvZCA9PSBQUk9EVUNUX05FU1NVU0RfTlNYKSBzY2FuX3R5cGUgPSAiTmVzc3VzIGluIE5TWCBlbnZpcm9ubWVudCI7CiAgZWxzZSBzY2FuX3R5cGUgPSAiTmVzc3VzIHByb2R1Y3QgdW5kZXRlcm1pbmVkIjsKICByZXBvcnQgKz0gJ1NjYW4gdHlwZSA6ICcgKyBzY2FuX3R5cGUgKyAnXG4nOwp9Cgpwb2xpY3lfbmFtZSA9IGdldF9wcmVmZXJlbmNlKCJAaW50ZXJuYWxAcG9saWN5X25hbWUiKTsKaWYgKCBzdHJsZW4ocG9saWN5X25hbWUpID4gMCApCnsKICBhY2FzX2luZm8gKz0gJ1NjYW5Qb2xpY3k6JyArIHBvbGljeV9uYW1lOwogIHJlcG9ydCArPSAnU2NhbiBwb2xpY3kgdXNlZCA6ICcgKyBwb2xpY3lfbmFtZSArICdcbic7Cn0KCmlmIChkZWZpbmVkX2Z1bmMoInJlcG9ydF94bWxfdGFnIikpCnsKICBwb2xpY3lfbmFtZTIgPSBnZXRfcHJlZmVyZW5jZSgic2NfcG9saWN5X25hbWUiKTsKICBpZiAoc3RybGVuKHBvbGljeV9uYW1lMikgPT0gMCkgcG9saWN5X25hbWUyID0gcG9saWN5X25hbWU7CiAgaWYgKHN0cmxlbihwb2xpY3lfbmFtZTIpID4gMCkgcmVwb3J0X3htbF90YWcodGFnOiJwb2xpY3ktdXNlZCIsIHZhbHVlOnBvbGljeV9uYW1lMik7Cn0KCmlmIChnZXRfa2JfaXRlbSgiSG9zdC9tc3Bfc2Nhbm5lciIpKQp7CiAgcmVwb3J0ICs9ICdTY2FubmVyIElQIDogdGVuYWJsZS5pbyBTY2FubmVyXG4nOwp9CmVsc2UKICByZXBvcnQgKz0gJ1NjYW5uZXIgSVAgOiAnICsgdGhpc19ob3N0KCkgICAgKyAnXG4nOwoKaWYgKCFnZXRfa2JfaXRlbSgibmVzc3VzL3Byb2R1Y3QvbG9jYWwiKSkKewogIGxpc3QgPSBnZXRfa2JfbGlzdCgiSG9zdC9zY2FubmVycy8qIik7CiAgaWYgKCAhIGlzbnVsbChsaXN0KSApCiAgewogICBmb3JlYWNoIGl0ZW0gKCBrZXlzKGxpc3QpICkKICAgewogICAgaXRlbSAtPSAiSG9zdC9zY2FubmVycy8iOwogICAgc2Nhbm5lcnMgKz0gaXRlbSArICcgJzsKICAgfQoKICAgcmVwb3J0ICs9ICdQb3J0IHNjYW5uZXIocykgOiAnICsgc2Nhbm5lcnMgKyAnXG4nOwogIH0KICBlbHNlCiAgIHJlcG9ydCArPSAnXG5XQVJOSU5HIDogTm8gcG9ydCBzY2FubmVyIHdhcyBlbmFibGVkIGR1cmluZyB0aGUgc2Nhbi4gVGhpcyBtYXlcbmxlYWQgdG8gaW5jb21wbGV0ZSByZXN1bHRzLlxuXG4nOwoKICBpZiAoIGdldF9rYl9pdGVtKCJnbG9iYWxfc2V0dGluZ3MvZGlzYWJsZV9zZXJ2aWNlX2Rpc2NvdmVyeSIpICkKICB7CiAgIHJlcG9ydCArPSAnXG5XQVJOSU5HOiBTZXJ2aWNlIGRpc2NvdmVyeSBoYXMgYmVlbiBkaXNhYmxlZC4gVGhlIGF1ZGl0IGlzIGluY29tcGxldGUuXG4nOwogIH0KCiAgcmFuZ2UgPSBnZXRfcHJlZmVyZW5jZSgicG9ydF9yYW5nZSIpOwogIGlmICggISByYW5nZSApIHJhbmdlID0gIig\","xrefs":"","family":{"id":"41","name":"Settings","type":"active"}},"error_code":0,"error_msg":"","warnings":[],"timestamp":1550695070}

'}
    headers:
      cache-control: ['no-store, no-cache, must-revalidate']
      connection: [Keep-Alive]
      content-type: [application/json]
      date: ['Wed, 20 Feb 2019 20:37:50 GMT']
      expires: ['Thu, 19 Nov 1981 08:52:00 GMT']
      keep-alive: ['timeout=15, max=100']
      pragma: [no-cache]
      securitycenter: [5.8.0]
      server: [Apache]
      strict-transport-security: [max-age=31536000; includeSubDomains]
      transfer-encoding: [chunked]
      x-content-type-options: [nosniff]
      x-frame-options: [DENY]
      x-xss-protection: [1; mode=block]
    status: {code: 200, message: OK}
version: 1
